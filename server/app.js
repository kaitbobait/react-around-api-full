const express = require('express');

const app = express();
const mongoose = require('mongoose');
require('dotenv').config();

const { PORT = 3000 } = process.env;
// const PORT = process.env.NODE_ENV === 'production' ? "https://api.kaitbobait.students.nomoreparties.site" : "http://localhost:3000"

const helmet = require('helmet');
const { celebrate, Joi, errors } = require('celebrate');

const cors = require('cors');
const userRouter = require('./routes/users');
const cardRouter = require('./routes/cards');
const auth = require('./middlewares/auth');
const { requestLogger, errorLogger } = require('./middlewares/logger');
const { NotFoundError } = require('./errors/notFoundError');

const { login, createUser } = require('./controllers/userControllers');

mongoose.connect('mongodb://localhost:27017/aroundb', {
  useNewUrlParser: true,
  useCreateIndex: true,
  useFindAndModify: false,
  useUnifiedTopology: true,
});

/**
 * adds a user object to each request
 * middleware
 * hard coded _id - temporary solution
 */

app.use(express.json());

// protects app from web vulnerabilities by setting HTTP headers
app.use(helmet());
app.use(cors());
app.options('*', cors());
// enabling the winston request logger
app.use(requestLogger);

// app.post(
//   "/signin",
//   celebrate({
//     body: Joi.object().keys({
//       email: Joi.string().required().email(),
//       password: Joi.string().required(),
//     }),
//   }),
//   login
// );

app.post(
  '/signin',
  login,
);
app.post(
  '/signup',
  celebrate({
    body: Joi.object().keys({
      email: Joi.string().required().email(),
      password: Joi.string().required().min(8),
    }),
  }),
  createUser,
);

app.use('/', auth, userRouter);
app.use('/', auth, cardRouter);

app.get('*', () => {
  throw new NotFoundError('Requested resource not found');
});

// enable winston error logger
app.use(errorLogger);

// celebrate error handler - only handles errors generated by celebrate
app.use(errors());

// add server error if unexpected error occurs
// app.use((err, req, res, next) => {
//   console.log('err:', err);
//   const { statusCode = 500, message } = err;
//   console.log('error log:', err);
//   res.status(500).send({
//     message:
//       statusCode === 500 ? "An error occurred on the server" : err.message,
//   });
// });

app.use((err, req, res) => {
  const { statusCode, message } = err;
  res.status(statusCode).send({
    message:
      statusCode === 500 ? 'An error occurred on the server' : message,
  });
});

app.listen(PORT, () => {
  // if everything works fine, the console will show which port the application is listening to
  console.log(`App listening at port ${PORT}, k byeBYE!`);
});

// app.listen('https://kaitbobait.students.nomoreparties.site');
